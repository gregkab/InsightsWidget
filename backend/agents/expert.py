from typing import Dict, List
import json
from .base import BaseAgent
from ..exceptions import AIServiceError

class ExpertAgent(BaseAgent):
    """Agent that generates insights based on its assigned expert role."""
    
    SYSTEM_PROMPT_TEMPLATE = """You are an expert {role}. 
Your task is to analyze content and provide specific, actionable insights.
Focus on being practical and precise.

Guidelines for your analysis:
1. Focus on actionable improvements
2. Consider both immediate and long-term impact
3. Balance technical and business perspectives
4. Provide specific examples where possible
5. Consider industry best practices
6. Be concise but thorough

You must return a JSON response with an array of insights, where each insight has:
- content: The actual insight/recommendation
- rationale: Brief explanation of why this insight matters
- impact: Expected impact of implementing this insight (Low/Medium/High)

IMPORTANT: Return EXACTLY 5 insights - no more, no less.
Keep insights concise and actionable."""

    def generate_insights(
        self,
        content: str,
        expert_role: str,
        analysis_prompt: str,
        focus_areas: List[str],
        url: str = None
    ) -> List[Dict]:
        """
        Generate insights based on content and expert role.
        
        Args:
            content: The webpage content to analyze
            expert_role: The role this expert should assume
            analysis_prompt: Specific guidance for analysis
            focus_areas: Key areas to focus on
            url: Optional URL of the webpage
        
        Returns:
            List of insights with content, and rationale
        """
        # Prepare context for the expert
        context = (
            f"Content to analyze: {content}\n\n"
            f"Analysis prompt: {analysis_prompt}\n\n"
            f"Focus areas:\n" + "\n".join(f"- {area}" for area in focus_areas)
        )
        if url:
            context += f"\n\nURL: {url}"
            
        # Set up JSON response format
        response_format = {
            "type": "json_schema",
            "name": "expert_insights",
            "schema": {
                "type": "object",
                "properties": {
                    "insights": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "content": {
                                    "type": "string",
                                    "description": "The actual insight/recommendation"
                                },
                                "rationale": {
                                    "type": "string",
                                    "description": "Brief explanation of why this insight matters"
                                },
                                "impact": {
                                    "type": "string",
                                    "enum": ["Low", "Medium", "High"],
                                    "description": "Expected impact of implementing this insight"
                                }
                            },
                            "required": ["content", "rationale", "impact"],
                            "additionalProperties": False
                        },
                        "description": "Array of insights generated by the expert"
                    }
                },
                "required": ["insights"],
                "additionalProperties": False
            },
            "strict": True
        }
        
        # Get AI response
        response = self._call_openai(
            system_prompt=self.SYSTEM_PROMPT_TEMPLATE.format(role=expert_role),
            user_prompt=context,
            temperature=0.7,
            response_format=response_format
        )
        
        # Parse and validate response
        try:
            result = json.loads(response)
            return result["insights"]
        except (json.JSONDecodeError, KeyError) as e:
            raise AIServiceError(f"Failed to parse expert response: {str(e)}") 